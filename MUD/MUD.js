var game = new JSGame('#game');var map = {     "castle": {        "connects_to": ["forest", "farm"],        "description": "a tall and gloomy castle",        "item": "old torn tapestry"    },    "forest": {        "connects_to": ["castle", "farm", "creek"],        "description": "a dark forest"    },     "creek": {        "connects_to": ["forest", "farm", "clearing"],        "description": "a creek",        "item": "fish"    },    "clearing": {        "connects_to": ["creek"],        "description": "a clearing",        "item": "fishing hook"    },    "farm": {        "connects_to": ["castle", "forest", "creek"],        "description": "a farm",        "item": "pitchfork"    },}var roleList = ["plasterer", "streetlighter", "ratcatcher"]var roles = {    "plasterer": {        "hit_points": 13,        "power": 8,        "intelligence": 7,        "skill": "PLAST"    },    "streetlighter": {        "hit_points": 15,        "power": 5,        "intelligence": 9,        "skill": "LIGHT"    },    "ratcatcher": {        "hit_points": 13,        "power": 6,        "intelligence": 5,        "skill": "CATCH"    }}var add_item_based_on_location = function(place) {    new_item = map[place]['item'];    // With some probability, add the item to the inventory    if (new_item != "fish" && _.contains (game.state.inventory, new_item)) {    	return    }     if (place === "castle") {    	if (Math.random() < 0.3) {    		game.print("You found a " + new_item + " at the " + new_place);        	game.state.inventory = _.union(game.state.inventory, [new_item]);    	}    } else if (place === "farm") {    	if (Math.random() < 0.5) {    		game.print("You found a " + new_item + " at the " + new_place);        	game.state.inventory = _.union(game.state.inventory, [new_item]);    	}    } else if (place === "clearing") {    	if (Math.random() < 0.8) {    		game.print("You found a " + new_item + " at the " + new_place);        	game.state.inventory = _.union(game.state.inventory, [new_item]);    	}    } else if (place === "creek") {    	if (_.contains(game.state.inventory, "fishing hook")) {    		if (Math.random() < 0.9) {    		    if (Math.random() < 0.375) {    	            game.print("Sorry a big hungry crocodile ate the fish you caught. POOR YOU :(");    	        }    	        else {    			    game.state.fishCount ++;    			    game.print("You found a " + new_item + " at the " + new_place);        		    game.state.inventory = _.union(game.state.inventory, [new_item]);        		}    		}    	}    }}var doStab = function() {	if (_.contains(game.state.inventory, "pitchfork")) {    	game.wait_for_text(_.union(["skill", "swing sword", "stab"])).then(go_to_place_or_inventory);	} else {		game.wait_for_text(_.union(["skill", "swing sword"])).then(go_to_place_or_inventory);   	}}var attackBoar = function(prob, damage) {	if (Math.random() < prob) {    	game.state.boarHealth -= damage;    	if (game.state.boarHealth <= 0) {			game.print("You killed that boar. Yay for you.");  			game.wait_for_text(_.union(map[new_place]["connects_to"], ["inventory"])).then(go_to_place_or_inventory);    	} else {    		game.print("You hit the boar, he now has " + game.state.boarHealth + " health");    		doStab();    		boarAttack();    	}	} else {    	game.print("You missed. He still has " + game.state.boarHealth + " health");    	doStab();    	boarAttack();	}}var boarAttack = function() {	if (Math.random() < 0.5) {		roles[game.state.role]["hit_points"] -= 5;		if (roles[game.state.role]["hit_points"] <= 0) {			game.print("The boar killed you. You are now dead. GAME OVER, :(");			game.game_over();		} else {			game.print("The boar hit you, you now have " + roles[game.state.role]["hit_points"] + " health");		}	} else {		game.print("The boar missed you, you still have " + roles[game.state.role]["hit_points"] + " health");	}}var go_to_place_or_inventory = function(input) {    if (input === "inventory") {        check_inventory();        new_place = game.state.location;  // reuse the last location        game.print("You are at " + new_place);        if (_.contains(game.state.inventory, "fish")) {        	game.wait_for_text(_.union(map[new_place]["connects_to"], ["eat fish"], ["inventory"])).then(go_to_place_or_inventory);        } else {        	game.wait_for_text(_.union(map[new_place]["connects_to"], ["inventory"])).then(go_to_place_or_inventory);        }    } else if (input === "skill") {    	attackBoar(0.7, 7);    } else if (input === "swing sword" || input === "stab"){    	attackBoar(0.6, 4);    } else if (input === "eat fish"){    	roles[game.state.role]["hit_points"] += 4;    	if (game.state.fishCount > 1) {    		game.state.fishCount -= 1;    	} else {    		game.state.fishCount -= 1;    		game.state.inventory = _.without(game.state.inventory, "fish");    	}    	game.print("You ate a fish. You now have " + roles[game.state.role]["hit_points"] + " health");    	game.print("You are at " + new_place);    	game.wait_for_text(_.union(map[new_place]["connects_to"], ["inventory"])).then(go_to_place_or_inventory);    } else {        // otherwise, the input must be a location. Update game.state.location.        game.state.location = input;        new_place = input;         game.print("You are at " + new_place);        add_item_based_on_location(new_place);        if (new_place === "forest") {    		if (Math.random() < 0.45){    			game.state.boarHealth = 14;    			game.print("You see a blood thirsty boar");    			doStab();    		} else {    			game.wait_for_text(_.union(map[new_place]["connects_to"], ["inventory"])).then(go_to_place_or_inventory);    		}    	} else {        	game.wait_for_text(_.union(map[new_place]["connects_to"], ["inventory"])).then(go_to_place_or_inventory);        }    }}   var receive_character_choice = function(chosenRole) {    game.state.role = chosenRole;    game.print("You are a " + chosenRole + ".");    game.print("Where would you like to go? You are at the castle and you have a sword.");    game.wait_for_text(_.union(map['castle']['connects_to'], ['inventory'])).then(go_to_place_or_inventory);}var choose_character = function() {    game.print("Who would you like to be?");    game.wait_for_text(roleList).then(receive_character_choice);}   var check_inventory = function() {    if (game.state.inventory.length == 0) {        game.print("You have nothing at all!");    } else {    	game.print("You have: ")        for (var i = 0; i < game.state.inventory.length; i++) {        	if (game.state.inventory[i] === "fish") {        		game.print("    " + game.state.fishCount + " fish")        	} else {        		game.print("    " + game.state.inventory[i]);        	}        }    }}// entry pointgame.state.inventory = ["sword"];game.state.location = "castle";game.state.fishCount = 0;game.state.boarHealth = 15;choose_character();